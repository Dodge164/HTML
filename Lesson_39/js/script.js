"use strict"
//Задача №1
//Вывести в консоль числа от 1 до 5 всеми возможными способами
//СПОСОБ 1:
// let num = 0;
// while (num <= 5) {
// 	console.log(num);
// 	num++;
// }
//СПОСОБ 2:
// let num = 5;
// while (num) {
// 	console.log(num);
// 	num--;
// }
//СПОСОБ 3:
// let num = 5;
// while (num) console.log(num--);

//СПОСОБ 4:
// let num = 1;
// do {
// 	console.log(num);
// 	num++;
// } while (num <6);
//СПОСОБ 5:
// for (let num = 1; num <= 5; num++) {
// 	console.log(num);
// }
//СПОСОБ 6:
// for (let num = 1; num <= 5; num++) {
// 	console.log(num);
// }
// console.log(num);
//СПОСОБ 7:
// let num;
// for (num = 1; num <= 5; num++) {
// 	console.log(num);
// }
// Задача №2
// let num = 8;
// while (num) {
// 	//Последний результат 0, верно?
// 	console.log(num);
// 	num--;
	// Неверно, последний результат 1, тк 0 уже false
// }
//Задача №3. Переписать на while
// for (let num = 0; num < 3; num++) {
// 	console.log(`Число: ${num}`);
// }
// Решение:
// let num = 0;
// while (num < 3) {
// 	console.log(`Число: ${num}`);
// 	num++;
// }
//Задача №4. Прекратить работу цикла №1 когда size равна 1
//Цикл №1
for (let num = 0; num < 2; num++) {
// 	//Цикл №2
	for (let size = 0; size < 3; size++) {
		console.log(size);
if (size == 1) break;
	}
}



















/*
// Директива break
let num = 0;
for (; num < 5; num++) {
	console.log(num);
	if (num == 2) break;
}
console.log(`Работа окончена, num = ${num}`);
//---
*/

/*
let num = 0;
for (; num < 5; num++) {
	if (num == 2) continue;
	console.log(num);
}
//---
*/

// Директива break/continue и "?"
/*
let num = 0;
for (; num < 5; num++) {
	(num != 2) ? console.log(num) : continue;
}
//---
*/

/*
firstFor: for (let num = 0; num < 2; num++) {
	for (let size = 0; size < 3; size++) {
		if (size == 2) {
			continue firstFor;
		}
		console.log(size);
	}
}
*/


// Итоги и домашка
/*
1.	while – Проверяет условие перед каждой итерацией.
2.	do..while – Проверяет условие после каждой итерации.
3.	for (;;) – Проверяет условие перед каждой итерацией,
	есть возможность задать дополнительные настройки.

Чтобы организовать бесконечный цикл, используют
конструкцию while (true).
При этом он, как и любой другой цикл, может быть
прерван директивой break.

Если на данной итерации цикла делать больше
ничего не надо, но полностью прекращать цикл не
следует – используют директиву continue.

Обе этих директивы поддерживают метки, которые ставятся
перед циклом. Метки – единственный способ для break/continue
выйти за пределы текущего цикла, повлиять на выполнение внешнего.
Помним, что метки не позволяют прыгнуть в произвольное место кода,
в JavaScript нет такой возможности.

Конечно же в JavaScript существуют и другие методы перебора.
Например, перебор объектов или массивов. О них мы поговорим
в отдельных уроках, а пока домашка.
*/

//========================================================================================================================================================
//========================================================================================================================================================

//ДОМАШКА
/*
1. Изучить теорию
2. Решить задачи:
*/
/*
//Задача №1
//Вывести в консоль числа от 1 до 5

//Задача №2
let num = 8;
while (num) {
	//Последний результат 0, верно?
	console.log(num);
	num--;
}
//Задача №3. Переписать на while
for (let num = 0; num < 3; num++) {
	console.log(`Число: ${num}`);
}
//Задача №4. Прекратить работу цикла №1 когда size равна 1
//Цикл №1
for (let num = 0; num < 2; num++) {
	//Цикл №2
	for (let size = 0; size < 3; size++) {
		console.log(size);
	}
}*/
//========================================================================================================================================================
//========================================================================================================================================================